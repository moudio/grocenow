name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  RAILS_ENV: test
  DATABASE_URL: postgresql://postgres:postgres@localhost:5432/grocenow_test

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: grocenow_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.2.2'
        bundler-cache: true

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y postgresql-client

    - name: Setup database
      run: |
        bundle exec rails db:create
        bundle exec rails db:schema:load
        bundle exec rails db:seed

    - name: Run tests
      run: bundle exec rails test

    - name: Run system tests
      run: bundle exec rails test:system

  security:
    name: Security Checks
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.2.2'
        bundler-cache: true

    - name: Run Brakeman security scan
      run: bundle exec brakeman --no-progress --format json --output brakeman-report.json

    - name: Upload Brakeman results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: brakeman-report
        path: brakeman-report.json

    - name: Run bundle audit
      run: bundle exec bundle-audit check --update

  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.2.2'
        bundler-cache: true

    - name: Run RuboCop
      run: bundle exec rubocop --parallel

    - name: Check ERB syntax
      run: bundle exec erb -P -x -T '-' app/views/**/*.erb | ruby -c

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [test, security, lint]
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.2.2'
        bundler-cache: true

    - name: Build Docker image
      run: |
        docker build -t grocenow:${{ github.sha }} .
        docker tag grocenow:${{ github.sha }} grocenow:latest

    - name: Upload Docker image
      uses: actions/upload-artifact@v4
      with:
        name: docker-image
        path: |
          grocenow:${{ github.sha }}
          grocenow:latest

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment commands here
        # Example: bundle exec kamal deploy staging

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment commands here
        # Example: bundle exec kamal deploy production

  notify:
    name: Notify Team
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()

    steps:
    - name: Notify on success
      if: success()
      run: |
        echo "✅ Deployment completed successfully!"
        # Add notification logic here (Slack, email, etc.)

    - name: Notify on failure
      if: failure()
      run: |
        echo "❌ Deployment failed!"
        # Add failure notification logic here 